generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  active     Boolean   @default(true)

  @@map("users")
}

model Account {
  id         String    @id @default(uuid())
  name       String
  type       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  created_by String?
  updated_by String?
  earns      Earn[]
  expenses   Expense[]

  @@map("banks")
}

model Category {
  id          String       @id @default(uuid())
  name        String
  expense     Boolean      @default(true)
  includeGoal Boolean      @default(true)
  priority    Int          @default(0)
  created_at  DateTime?    @default(now())
  updated_at  DateTime?    @default(now())
  created_by  String?
  updated_by  String?
  earnings    Earn[]
  expenses    Expense[]
  goalPeriods GoalPeriod[]
  goals       Goal[]

  @@map("categories")
}

model Period {
  id          String       @id @default(uuid())
  month       Int
  year        Int
  created_at  DateTime?    @default(now())
  updated_at  DateTime?    @default(now())
  created_by  String?
  updated_by  String?
  GoalPeriods GoalPeriod[]

  @@map("periods")
}

model Goal {
  id          String    @id @default(uuid())
  amount      Float
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  created_by  String?
  updated_by  String?
  category_id String
  category    Category  @relation(fields: [category_id], references: [id])

  @@map("goals")
}

model GoalPeriod {
  id          String    @id @default(uuid())
  amount      Float
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  created_by  String?
  updated_by  String?
  period_id   String
  category_id String
  earns       Earn[]
  expenses    Expense[]
  category    Category  @relation(fields: [category_id], references: [id])
  period      Period    @relation(fields: [period_id], references: [id])

  @@map("goalPeriods")
}

model Expense {
  id             String     @id @default(uuid())
  date           DateTime
  description    String?
  value          Float
  created_at     DateTime?  @default(now())
  updated_at     DateTime?  @default(now())
  created_by     String?
  updated_by     String?
  category_id    String
  goal_period_id String
  bank_id        String
  account        Account    @relation(fields: [bank_id], references: [id])
  category       Category   @relation(fields: [category_id], references: [id])
  goalPeriod     GoalPeriod @relation(fields: [goal_period_id], references: [id])

  @@map("expenses")
}

model Earn {
  id             String     @id @default(uuid())
  date           DateTime
  description    String?
  value          Float
  created_at     DateTime?  @default(now())
  updated_at     DateTime?  @default(now())
  created_by     String?
  updated_by     String?
  category_id    String
  goal_period_id String
  bank_id        String
  account        Account    @relation(fields: [bank_id], references: [id])
  category       Category   @relation(fields: [category_id], references: [id])
  goalPeriod     GoalPeriod @relation(fields: [goal_period_id], references: [id])

  @@map("earn")
}
